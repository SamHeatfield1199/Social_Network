{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","Dialogs","state","messagesPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","isAuth","dialogs_items","values","sendMessage","compose","withAuthRedirect","connect","dispatch","sendMessageCreator"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8JCctMC,EAXI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCDvBC,EANC,SAACT,GACb,OACI,qBAAKG,UAAWC,IAAQC,OAAxB,SAAiCL,EAAMU,WCoCzCC,EAAYC,YAAiB,KAe7BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAbL,SAACd,GACpB,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACdZ,KAAK,iBACLa,YAAY,qBACZC,SAAW,CAACC,IAAeZ,OAEnC,8BAAK,kDAMFa,EAjDC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,aAGdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OACrC,cAAC,EAAD,CAAY5B,GAAI4B,EAAE5B,GAAIM,KAAMsB,EAAEtB,UAC9BuB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OACvC,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,aACHe,EAAMS,eAM3B,OAAKlC,EAAMmC,OAIP,sBAAKhC,UAAWC,IAAQwB,QAAxB,UACI,qBAAKzB,UAAWC,IAAQgC,cAAxB,SACKT,IAGL,qBAAKxB,UAAWC,IAAQ4B,SAAxB,SACI,8BAAMD,MAEV,cAAClB,EAAD,CAAqBG,SAhBT,SAACqB,GACjBrC,EAAMsC,YAAYD,EAAOH,sBAGH,cAAC,IAAD,CAAU3B,GAAI,YCC7BgC,sBACXC,IACAC,aAlBoB,SAAChB,GACrB,MAAO,CACHC,aAAcD,EAAMC,iBAID,SAACgB,GACxB,MAAO,CACHJ,YAAa,SAACJ,GACVQ,EAASC,YAAmBT,SAOzBK,CAIbf","file":"static/js/4.f89e2a67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1d-qx\",\"dialogs_items\":\"Dialogs_dialogs_items__34ZHD\",\"active\":\"Dialogs_active__P3ZLH\",\"dialog\":\"Dialogs_dialog__1ARiP\",\"messages\":\"Dialogs_messages__wMHVY\",\"message\":\"Dialogs_message__1-pvx\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css'\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport classes from './../Dialogs.module.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={classes.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, requiredField } from '../../utils/validators/validator';\r\nimport { Textarea } from '../common/formsControls/FormsControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport classes from './Dialogs.module.css'\r\nimport Message from './Message/Message';\r\n//презентационные компоненты получают только данные и коллбеки(вызовы функций)\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.messagesPage\r\n\r\n    //Получаем JSX компоненты\r\n    let dialogsElements = state.dialogs.map(d =>\r\n        <DialogItem id={d.id} name={d.name} />)\r\n    let messagesElements = state.messages.map(m =>\r\n        <Message message={m.message} />)\r\n    let newMessageText = state.newMessageBody\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n    //Отрисовываем компоненты\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogs_items}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                    name=\"newMessageBody\"\r\n                    placeholder=\"Enter your message\"\r\n                    validate ={[requiredField, maxLength ]} />\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\n\r\nexport default Dialogs","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { sendMessageCreator, } from '../../redux/dialogsReducer';\r\nimport { withAuthRedirect } from '../hoc/AuthRedirect';\r\nimport Dialogs from './Dialogs';\r\n\r\n//создаем контейнер с помощью react-redux\r\n//двойные скобочки значат, что мы вызываем функцию вернувшуюся после вызова connect()\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messagesPage: state.messagesPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n//вызывается функция, которую нам вернул первый вызов\r\n//В данном случае берет диалог и закидывает в редирект, потом в коннект\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n\r\n)(Dialogs)\r\n"],"sourceRoot":""}