{"version":3,"sources":["components/Profile/My Posts/MyPosts.module.css","components/Profile/My Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/My Posts/Post/Post.jsx","components/Profile/My Posts/MyPosts.jsx","components/Profile/My Posts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","classes","item","message","likesCount","maxLength","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPosts","postsElements","postData","map","p","postBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","React","Component","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateUserStatus","ProfileInfo","profile","descriptionBlock","src","photos","large","preloader","Profile","ProfileContainer","userid","this","match","params","authedUserid","getUserProfile","getUserStatus","compose","auth","isAuth","setUserProfile","setUserProfileAC","getUserProfileTC","setUserStatusTC","updateUserStatusTC","withRouter"],"mappings":"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","file":"static/js/3.3d6fd7ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__2EYq7\",\"posts\":\"MyPosts_posts__20usH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__2gRzU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__t0MAG\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            {props.message}\r\n            <div>\r\n                <span>likes</span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, requiredField } from '../../../utils/validators/validator';\r\nimport { Textarea } from '../../common/formsControls/FormsControls';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\n//разделяем на презентационные и контейнерные компоненты\r\nconst MyPosts = (props) => {\r\n  let postsElements =\r\n    props.postData.map(p => <Post message={p.message}\r\n      likesCount={p.likesCount} />)\r\n  //создаем ссылку на элемент\r\n // let newPostElement = React.createRef();\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n  return (\r\n    <div className={classes.postBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostFormRedux onSubmit = {onAddPost}/>\r\n      <div className={classes.postData}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit = {props.handleSubmit}>\r\n      <div>\r\n        <Field component ={Textarea}\r\n         name=\"newPostText\"\r\n         placeholder=\"Enter your post\"\r\n         validate ={[requiredField, maxLength ]}/>\r\n      </div>\r\n      <div>\r\n        <button >Add Post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"profileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    postData: state.profilePage.postData,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\n\r\nclass ProfileStatus extends React.Component {\r\n   \r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n        }\r\n\r\n    activateEditMode =() =>{\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n    deactivateEditMode =() =>{\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n    //изменение статуса \r\n    onStatusChange = (e) =>{\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n        \r\n    }\r\n/*Компонент монтируется один раз. А потом, когда в нём меняется \r\nлокальный стейт либо кто-то извне хочет перерисовать компонент и \r\nзакинуть в него новые пропсы.. То срабатывает метод жизненного цикла \r\ncomponentDidMount\r\n*/\r\n\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(prevProps.status!== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n       }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>\r\n                            {this.props.status || \"-----\"}\r\n                        </span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        {/*blur срабатывает если элемент в фокусе*/}\r\n\r\n                            <input \r\n                            onChange ={this.onStatusChange}\r\n                            autoFocus ={true} \r\n                            onBlur ={this.deactivateEditMode}\r\n                             value={this.state.status} /> \r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ProfileStatus;","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useState } from 'react';\r\n\r\n//хуки - некоторая функция, которые нельзя использовать в условиях,\r\n//в циклах и тд\r\n\r\n\r\n/*\r\nVirtualDOM - то, благодаря чему ReactJS так взлетел.\r\n Он говорит: настоящий DOM - это дорого, это перерисовки, \r\n это ресурсы, дёрганья, и так далее... Давайте Я (REACT) брать брать\r\n  JSX из компонент и на основе его формировать Virtual DOM - набор\r\n   оъектов, из который потом буду превращать в настоящий DOM. \r\n   Зачем этот промежуточный слой нужен?\r\nДля того, чтобы прежде чем идти на основе Virtual DOM строить \r\nнастоящий DOM... Я смогу сравнить тот VirtualDOM, который у меня \r\nуже был, с тем, который я получил в текущей отрисовке из компонент,\r\n и... Сравнить их. И если изменения есть, я пойду и точечно эти\r\n  изменения перерисую в настоящем DOM.\r\n\r\nКак результат - коллосальный прирост производительности по сравнению с тем, как с DOM работали раньше (шаблонизаторы, innerHTML и так далее)...\r\n*/\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    //локальный стейт. возвращает массив и в нем сидит два элемента\r\n    //первый - название массива, второй - функция, которая будет изменять одиночное значение\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    //закидываем функцию, которая будет выполняться после отрисовки страницы\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status || \"-----\"}\r\n                    </span>\r\n                </div>\r\n            }\r\n\r\n            {editMode &&\r\n                <div>\r\n                    {/*blur срабатывает если элемент в фокусе*/}\r\n\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport preloader from '../../../images/2.gif';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n  if (!props.profile) {\r\n    return (\r\n      <div><img src={preloader} /></div>\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      {/*<div><img src=\"https://pix10.agoda.net/hotelImages/3375/-1/f73547b49eadee36c6346f52a5b4f4fe.jpg?s=1024x768\" />\r\n      </div> */}\r\n      <div className={classes.descriptionBlock}>\r\n        <img src={props.profile.photos.large} />\r\n        <ProfileStatusWithHooks status ={props.status}\r\n        updateUserStatus = {props.updateUserStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPostsContainer from './My Posts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile}\r\n      status = {props.status} \r\n      updateUserStatus = {props.updateUserStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getUserProfileTC, setUserProfileAC, setUserStatusAC, setUserStatusTC, updateUserStatusTC } from '../../redux/profileReducer';\r\nimport Profile from './Profile';\r\n\r\n//делаем классовым, чтобы можно было сделать запрос\r\n//делаем компоненту вручную\r\nclass ProfileContainer extends React.Component {\r\n\r\n  componentDidMount() {\r\n    let userid = this.props.match.params.userid\r\n    if (!userid) {\r\n      userid = this.props.authedUserid\r\n    }\r\n    this.props.getUserProfile(userid)\r\n    this.props.getUserStatus(userid)\r\n   \r\n  }\r\n\r\n  render() {\r\n    //редирект на страницу логина. если не хотим показывать контент незарегестрированным пользователям, хорошее решение\r\n    return (\r\n        <Profile {...this.props}\r\n         profile={this.props.profile} \r\n         status ={this.props.status}\r\n         updateUserStatus = {this.props.updateUserStatus}/>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authedUserid : state.auth.userid,\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    setUserProfile: setUserProfileAC,\r\n    getUserProfile: getUserProfileTC,\r\n    getUserStatus: setUserStatusTC,\r\n    updateUserStatus: updateUserStatusTC,\r\n  }),\r\n  withRouter,\r\n  \r\n)(ProfileContainer)"],"sourceRoot":""}